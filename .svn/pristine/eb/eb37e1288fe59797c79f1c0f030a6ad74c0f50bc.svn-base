<template>
  <div>
    <div class="m-bottom-sm">
      <el-button-group>
        <el-button type="default" size="small" icon="el-icon-plus" @click="showAddNew=true">新增会员</el-button>
        <el-button
          type="default" size="small"
          icon="el-icon-upload2"
          for="input"
          :loading="importLoading"  
          @click="$refs.upload.click()"
        >批量导入</el-button>
        <input type="file" ref="upload" accept=".xls, .xlsx" class="outputlist_upload hide">
      </el-button-group>
      <el-button-group>
        <el-button size="small"
          type="default"
          icon="el-icon-download"
          @click="ExportMemberData"
          :loading="exportLoading"
        >批量导出</el-button>
        <el-button size="small" type="default" icon="el-icon-finished" @click="reportLossfun" :loading="reportLoss.loading">挂失</el-button>
      </el-button-group>
      <el-button-group>
          <el-button type="default" size="small" icon="el-icon-download">
              <a href="static/images/会员导入模板.xls" class="producttemplate">下载模板</a>
          </el-button>
      </el-button-group>
      <!-- add -->
      <el-dialog
        v-if="showAddNew"
        title="新增会员"
        :visible.sync="showAddNew"
        width="800px"
        style="max-width:100%;"
      >
        <add-new-member @closeModal="showAddNew=false" v-on:childByData='childByData' @resetList="showAddNew=false;getNewData();"></add-new-member>
      </el-dialog>
      <!-- search -->
      <el-input
        type="default" size="small"
        v-model="searchText"
        placeholder="会员手机号/卡号/姓名"
        class="pull-right"
        style="width: 250px;"
      >
        <el-button slot="append" type="default" icon="el-icon-search" @click="searchfun2(1)"></el-button>
      </el-input>
      <!-- 筛选会员 -->
      <el-button-group class="pull-right m-right-sm">
        <el-popover placement="bottom" v-model="isFilter">
          <div>
            <el-form label-width="100px">
              <el-form-item label="会员状态：">
                <el-radio-group v-model="pageData.Status">
                  <el-radio-button size="mini" label="-1">全部</el-radio-button>
                  <el-radio-button size="mini" label="0">正常</el-radio-button>
                  <el-radio-button size="mini" label="2">挂失</el-radio-button>
                </el-radio-group>
              </el-form-item>
              <el-form-item label="会员等级：">
                <el-select v-model="pageData.LevelName" clearable placeholder="请选择">
                  <el-option v-for="(item,i) in memberLevelList" :key="i" :label="item.NAME" :value="item.NAME"></el-option>
                </el-select>
              </el-form-item>
              <el-form-item label="会员标签：" style="max-width:500px;">
                <el-select v-model="pageData.VipFlag" clearable placeholder="请选择">
                  <el-option
                    v-for="(item,i) in flagList"
                    :key="i"
                    :label="item.VIPFLAG"
                    :value="item.VIPFLAG"
                  ></el-option>
                </el-select>
              </el-form-item>
            </el-form>
          </div>
          <div style="text-align: right; margin: 0">
            <el-button size="mini" type="text" @click="isFilter = false">取消</el-button>
            <el-button type="primary" size="mini" @click="submitChoose" :loading="loading">确定</el-button>
          </div>
          <el-button type="default" size="small" icon="icon-filter" slot="reference">&nbsp;&nbsp;筛选会员</el-button>
        </el-popover>
      </el-button-group>
    </div>
    <!--列表-->
    <div class="checkboxStyle">
      <el-table
        border size='small'
        :data="pagelist"
        v-loading="loading"
        element-loading-text='数据加载中...'
        @selection-change="handleSelectionChange"
        header-row-class-name="bg-f1f2f3"
        :height="clientHeight"
      >
        <el-table-column type="selection" width="50" fixed="left"></el-table-column>
        <el-table-column prop='NAME' label="会员名称" width="90" sortable fixed='left'></el-table-column>
        <el-table-column prop="CODE" label="卡号" width="130" sortable fixed='left'></el-table-column>
        <el-table-column prop="SEX" label="性别" width="50" align='center'>
          <template slot-scope="scope">
            {{scope.row.SEX == 0 ? '男' : scope.row.SEX == 1 ? '女' : ''}}
          </template>
        </el-table-column>
        <el-table-column prop="MOBILENO" label="手机号码" width="110"></el-table-column>
        <el-table-column prop="LEVELNAME" label="等级"></el-table-column>
        <el-table-column prop="VIPFLAG" label="标签"></el-table-column>
        <el-table-column prop="SHOPNAME" label="所属店铺"></el-table-column>
        <el-table-column prop="INTEGRAL" align='right' label="积分" sortable></el-table-column>
        <el-table-column prop="MONEY" align='right' label="余额" sortable></el-table-column>
        <el-table-column prop="OWEMONEY" align='right' label="欠款" sortable></el-table-column>
        <el-table-column align='center' label="状态" fixed='right'>
          <template slot-scope="scope">
            <el-badge is-dot :type='scope.row.STATUS == 0 ? "success" : "danger"'></el-badge>
            {{scope.row.STATUS == 0 ? '正常' : '挂失'}}
          </template>
        </el-table-column>
        <el-table-column label="操作" width="140" fixed="right">
          <template slot-scope="scope">
            <el-button size="small" type='text' icon="el-icon-edit" @click="handleEdit(scope.$index, scope.row)">编辑</el-button>
            <el-button size="small" type='text' icnn="el-icon-edit" @click='handleIsLose(scope.$index, scope.row)'>
              <span>{{scope.row.STATUS == 0 ? '挂失' : '取消挂失' }}</span>
            </el-button>
          </template>
        </el-table-column>
      </el-table>
    </div>
    
    <!-- 分页 -->
    <div class="m-top-sm clearfix elpagination" v-if='pagination.TotalNumber > 20'>
      <el-pagination
        background
        @size-change="handlePageChange"
        @current-change="handlePageChange"
        :current-page.sync="pagination.PN"
        :page-size="pagination.PageSize"
        layout="total, prev, pager, next, jumper"
        :total="pagination.TotalNumber"
        class="text-center"
      ></el-pagination>
    </div>
    <!-- item -->
    <el-dialog title="会员详情" :visible.sync="showItem" width="770px" style="max-width:100%;" :before-close="handleDialogClose">
      <item-page @closeModal="showItem=false" :dataProfile='dataProfile' :pageState="showItem"></item-page>
    </el-dialog>
  </div>
</template>
<script>
import { mapState, mapGetters } from "vuex";
import { getUserInfo, getHomeData} from '@/api/index'
import MIXNINS_EXPORT from "@/mixins/exportData.js";
let _ = require("lodash");
export default {
  mixins: [MIXNINS_EXPORT.TOEXCEL, MIXNINS_EXPORT.TODATA],
  data() {
    return {
      pagelist: [],
      loading: false,
      pagination: {
        TotalNumber: 0,
        PageNumber: 0,
        PageSize: 20,
        PN: 0
      },
      searchText: "",
      isFilter: false,
      pageData: {
        PN: 1,
        Filter: "",
        Status: -1,
        LevelName: "",
        VipFlag: "",
        ShopId: getHomeData().shop.ID
      },
      clientHeight: document.body.clientHeight - 220,
      multipleSelection: [],
      reportLoss: { loading: false, num: 0 },
      showAddNew: false,
      showItem: false,
      exportLoading: false,
      dataProfile:{
        obj:{},
        total:{}
      }
    };
  },
  computed: {
    ...mapGetters({
      dataList: "memberList",
      dataListState: "memberListState",
      dataState: "memberState",
      dataState2: 'memberState2',
      reportLossState: "reportLossState",
      memberListAllState: "memberListAllState",
      memberLevelList: "memberLevelList",
      flagList: "memberFlagList",
      importState: "importMemberState"
    })
  },
  watch: {
    dataListState(data) {
      this.loading = false;
      this.isFilter = false;
      this.pagelist = [...this.dataList];
      if (data.success) {   
        this.pagination = {
          TotalNumber: data.paying.TotalNumber,
          PageNumber: data.paying.PageNumber,
          PageSize: data.paying.PageSize,
          PN: data.paying.PN
        };
      }
    },
    searchText() {
      this.searchfun();
    },
    reportLossState(data) {
      this.$message({
        message: data.message,
        type: data.success ? 'success' : 'error'
      });
      if (data.success) {
        this.$store.dispatch("getMemberList", this.pageData)
      }
    },
    memberListAllState(data) {
      this.exportLoading = false;
      if (data.success) {
        this.exportExcel(data.data.List);
      }
    },
    dataState(data) {
      if (data.success) {
        this.showItem = true;
        this.dataProfile.obj = data.data.obj
      }
    },
    dataState2(data){
      if(data.success){
        this.dataProfile.total = data.data
      }
    },
    outputsState(data) {
      // 导入 mixins
      if (data.state) {
        this.importExcel(this.outputs);
      } else {
        this.$message.error({ showClose: true, message: "数据为空" });
      }
    },
    importState(data) {
      if (data.success) {
        this.$message("导入成功");
        this.getNewData();
      } else {
        this.$message(data.message);
      }
    }
  },
  methods: {
    handleDialogClose(){
      this.showItem = false
      this.getNewData()
    },
    childByData(childByData){
      this.pagelist = childByData
    },
    getNewData() {
      this.pageData.ShopId = this.searchText != '' ? '' : getHomeData().shop.ID
      console.log(getHomeData())
      this.$store.dispatch("getMemberList", this.pageData).then(() => {
        this.loading = true;
      })
    },
    handleSelectionChange(val) {
      this.multipleSelection = val;
    },
    handleEdit(idx, item) {
      this.$store.dispatch("getMemberItem", item).then(() => {
        this.$store.dispatch("getMemberItem2", item)
      })
    },
    handleIsLose(idx, item){
      let statusTit = item.STATUS == 0 ? '挂失' : '取消挂失'
      this.$confirm("确认"+ statusTit + "【"+ item.NAME +" 】 会员?", "提示", {
        confirmButtonText: "确定",
        cancelButtonText: "取消",
        type: "warning"
      }).then(() => {
        this.$store.dispatch("setReportLoss", { id: item.ID, Type: item.STATUS == 0 ? 0 : 1})
      }).catch(() => {});
    },
    submitChoose(){
      let LevelName = this.pageData.LevelName != '' ? `'${this.pageData.LevelName}'` : ''
      let VipFlag = this.pageData.VipFlag != '' ? `'${this.pageData.VipFlag}'` : ''
      this.$store.dispatch("getMemberList", { PN: 1, Filter: "", Status : this.pageData.Status, LevelName : LevelName, VipFlag: VipFlag}).then(() => {
        this.loading = true;
      })
    },
    handlePageChange: function(currentPage) {
      if (this.pageData.PN == currentPage || this.loading) {
        return
      }
      this.pageData.PN = parseInt(currentPage)
      this.getNewData()
    },
    searchfun: _.debounce(function() { 
      this.searchfun2(0)
    }, 1000),
    searchfun2(type) {
      if (type == 1 && !this.searchText) {
        return
      }
      this.pageData.Filter = this.searchText;
      this.pageData.PN = 1
      this.getNewData()
    },
    reportLossfun() {
      if (this.multipleSelection.length == 0) {
        this.$message({ message: "请选择会员", type: "warning"})
        return
      }
      this.$confirm("确认挂失已选会员?", "提示", {
        confirmButtonText: "确定",
        cancelButtonText: "取消",
        type: "warning"
      }).then(() => {
        for (let i = 0; i < this.multipleSelection.length; i++) {
          this.$store.dispatch("setReportLoss", { id: this.multipleSelection[i].ID, Type: 0} )
        }
      }).catch(() => {})
    },
    ExportMemberData() {
      // 获取导出数据
      if (this.multipleSelection.length > 0) {
        this.exportExcel(this.multipleSelection);
      }else{
        let LevelName = this.pageData.LevelName != '' ? `'${this.pageData.LevelName}'` : ''
        let VipFlag = this.pageData.VipFlag != '' ? `'${this.pageData.VipFlag}'` : ''
        let sendData = {
          Filter: this.pageData.Filter,
          Status : this.pageData.Status,
          LevelName : LevelName,
          VipFlag: VipFlag,
          ShopId: getHomeData().shop.ID
        }
        this.$store.dispatch("getMemberListAll", sendData).then(() => {
          this.exportLoading = true;
        });
      }
    },
    exportExcel(arr) {
      // 导出到excel
      var list = [...arr];
      for (var i = 0; i < list.length; i++) {
        list[i].SEX = list[i].SEX == 0 ? '男' : '女';
        list[i].STATUS = list[i].STATUS == 0 ? '正常' : '挂失'
        list[i].CREATEDATE = this.filterTime(new Date(list[i].CREATEDATE));
        list[i].INVALIDDATE = this.filterTime(new Date(list[i].INVALIDDATE));
        list[i].LASTTIME = this.filterTime(new Date(list[i].LASTTIME));
        list[i].BIRTHDATE =
          list[i].BIRTHDATE > 0 && list[i].BIRTHDATE
            ? this.filterTime(new Date(list[i].BIRTHDATE))
            : "";
      }
      var head = [
        "名称", "卡号", "性别", "生日", "手机号", "余额",
        "等级","标签", "积分",
        "次卡","地址","店铺","创建日期","有效日期","最后登录日期",  
        "状态", "备注"
      ];
      var val = [
        "NAME",
        "CODE",
        "SEX",
        "BIRTHDATE",
        "MOBILENO",
        "MONEY",
        "LEVELNAME",
        "VIPFLAG",
        "INTEGRAL",
        "PAYCOUNT",
        "ADDRESS",
        "SHOPNAME",
        "CREATEDATE",
        "INVALIDDATE",
        "LASTTIME",
        "STATUS",
        "REMARK"
      ];
      var title = "会员导出" + this.getNowDateTime();
      this.export2Excel(head, val, list, title);
    },
    importExcel(arr) {
      // 导入数据
      let newData = [];
      let tableObj = {}
      let that=this;
      for (let i = 1; i < arr.length; i++) {
        let strCode;
        for (var index in arr[i]) {
          let strlen = index.replace(/\s*/g, "").length;
          if (strlen > 40) {
            strCode = arr[i][index];
          }
        }

        let returnBirthDate = arr[i].__EMPTY_3==undefined || arr[i].__EMPTY_3==null || arr[i].__EMPTY_3=='' ? 0 : new Date(arr[i].__EMPTY_3.replace(/\s*/g, "").split(".").join("-")).getTime()
        let item = {
          Code: strCode.toString().replace(/\s*/g, ""),
          Name:that.dealStringnull(arr[i].__EMPTY),
          Sex:that.dealStringnull(arr[i].__EMPTY_1),
          MobileNo:arr[i].__EMPTY_2 == undefined ? "" : Number(arr[i].__EMPTY_2),
          BirthDate: returnBirthDate,
          DiscountTypeName:that.dealStringnull(arr[i].__EMPTY_4),
          VipFlag:that.dealStringnull(arr[i].__EMPTY_5),
          QQ:that.dealStringnull(arr[i].__EMPTY_6),
          Wechat:that.dealStringnull(arr[i].__EMPTY_7),
          DepositMoney: arr[i].__EMPTY_8 == undefined ? "" : arr[i].__EMPTY_8,
          Address:that.dealStringnull(arr[i].__EMPTY_9),
          Remark:that.dealStringnull(arr[i].__EMPTY_10),
          Money: arr[i].__EMPTY_11 == undefined ? "" : arr[i].__EMPTY_11,
          Integral: arr[i].__EMPTY_12 == undefined ? "" : arr[i].__EMPTY_12
        };
        newData.push(item)
      }

      this.$store.dispatch("getImportMemberData", JSON.stringify(newData)).then(() => {
        // this.importLoading = true;
      });
    },
    dealStringnull(str){
      if(str==undefined){
        return '';
      }else{
        return str.toString().replace(/\s*/g, "");
      }
    },
  },
  mounted() {
    this.getNewData()
  },
  components: {
    addNewMember: () => import("@/components/member/add"),
    itemPage: () => import("./item")
  },
  beforeCreate() {
    let list2 = this.$store.state.member.memberLevelList;
    let list3 = this.$store.state.member.memberFlagList;
    this.$store.dispatch("getMemberLevel");
    this.$store.dispatch("getMemberFlag");
  }
};
</script>
<style scoped>
</style>
